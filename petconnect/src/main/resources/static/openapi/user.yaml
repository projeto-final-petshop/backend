openapi: 3.0.3
info:
  title: 'Petconnect'
  contact:
    name: 'Suporte'
    email: petshop.petconnect@gmail.com
  version: 1.0.0
servers:
  - url: 'http://localhost:8888/api/v1'
tags:
  - name: User
    description: 'Operações relacionadas a usuários'
paths:
  /users/me:
    get:
      summary: 'Detalhes do Usuário Autenticado'
      tags:
        - User
      operationId: 'authenticatedUser'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      security:
        - Bearer: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/InvalidField'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      summary: 'Listar Todos os Usuários'
      tags:
        - User
      operationId: 'allUsers'
      security:
        - Bearer: []
        - roles: [ADMIN]
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/InvalidField'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    put:
      summary: 'Atualiza os dados de um Usuário'
      tags:
        - User
      security:
        - Bearer: []
        - roles: [ADMIN, USER]
      operationId: 'updateUser'
      description: 'Atualiza os dados de um usuário pelo ID'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: 'Usuário atualizado com sucesso'
        '404':
          $ref: '#/components/responses/UserNotFound'

    delete:
      summary: 'Excluir um usuário'
      tags:
        - User
      security:
        - Bearer: []
        - roles: [ADMIN, USER]
      operationId: 'deleteUser'
      description: 'Excluir um usuário pelo ID'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: 'Usuário excluído com sucesso!'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /users/{id}/deactivate:
    put:
      summary: 'Desativa um usuário'
      tags:
        - User
      security:
        - Bearer: []
        - roles: [ADMIN, USER]
      operationId: 'deactivateUser'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: 'Usuário desativado com sucesso'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /users/{id}/activate:
    put:
      summary: 'Ativar um usuário'
      tags:
        - User
      security:
        - Bearer: []
        - roles: [ADMIN, USER]
      operationId: 'activateUser'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: 'Usuário ativado com sucesso'
        '404':
          $ref: '#/components/responses/UserNotFound'

  /users/search:
    put:
      summary: 'Busca um usuário pelo parâmetro fornecido'
      tags:
        - User
      security:
        - Bearer: []
        - roles: [ADMIN]
      operationId: 'findUser'
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
        - name: name
          in: query
          schema:
            type: string
          description: 'Nome do usuário'
        - name: email
          in: query
          schema:
            type: string
          description: 'Endereço de e-mail do usuário'
        - name: cpf
          in: query
          schema:
            type: string
          description: 'CPF do usuário'
        - name: active
          in: query
          schema:
            type: boolean
          description: 'Indica se o usuário está ativo'
      responses:
        '200':
          description: 'Usuário encontrado'
        '404':
          $ref: '#/components/responses/UserNotFound'

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    roles:
      type: apiKey
      in: header
      name: roles
  parameters:
    AuthHeader:
      in:       header
      name: Authorization
      required: true
      schema:
        type: string
        description: Token JWT de Autorização
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64

  responses:
    InvalidField:
      description: Campo inválido
    Unauthorized:
      description: Unauthorized (Não autenticado)
    Forbidden:
      description: Forbidden (Não tem permissão)
    UserNotFound:
      description: Usuário não encontrado.
    InternalServerError:
      description: Internal Server Error

  schemas:
    RegisterUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        cpf:
          type: string
        phoneNumber:
          type: string
        active:
          type: boolean
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          description: Nome do Usuário
          example: 'Nome do Usuário'
        email:
          type: string
          example: 'user@example.com'
        password:
          type: string
          example: 'P4$$w0rD'
        cpf:
          type: string
          example: 'XXX.XXX.XXX-XX'
        phoneNumber:
          type: string
          example: '5511998765432 ou +5511998765432'
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'
        updatedAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'