openapi: 3.0.3
info:
  title: 'Petconnect'
  description: 'API PetConnect - Cadastro e Autenticação de usuários'
  termsOfService: 'https://swagger.io/terms/'
  contact:
    name: 'Suporte'
    email: petshop.petconnect@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: 'Repositório do Projeto no GitHub'
  url: 'https://github.com/projeto-final-petshop'
servers:
  - url: 'http://localhost:8888/api/v1/auth'
tags:
  - name: Auth
    description: 'Autenticação'
paths:
  /signup:
    post:
      summary: 'Cadastrar um novo usuário'
      tags:
        - Auth
      operationId: 'register'
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: 'Usuário cadastrado com sucesso'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/InvalidField'
        '409':
          $ref: '#/components/responses/EmailAlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
          description: 'Internal server error'
  /login:
    post:
      summary: 'Login'
      tags:
        - Auth
      operationId: 'authenticate'
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Login bem-sucedido!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/InvalidField'
          description: 'Campo inválido!'
        '500':
          $ref: '#/components/responses/InternalServerError'
          description: 'Internal server error'
  /reset-password:
    post:
      summary: 'Solicitar redefinição de senha'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: 'Link de redefinição de senha enviado com sucesso!'
        '400':
          $ref: '#/components/responses/InvalidField'
          description: 'Solicitação inválida ou e-mail não encontrado!'
        '500':
          $ref: '#/components/responses/InternalServerError'
          description: 'Internal server error'
  /reset-password/confirm:
    post:
      summary: 'Confirmar solicitar redefinição de senha'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: 'Senha redefinida com sucesso'
        '400':
          $ref: '#/components/responses/InvalidField'
          description: 'Solicitação inválida!'
        '404':
          $ref: '#/components/responses/EmailNotFound'
          description: 'E-mail não cadastrado!'
        '500':
          $ref: '#/components/responses/InternalServerError'
          description: 'Internal server error'
components:
  responses:
    InvalidField:
      description: 'Campo inválido.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UserNotFound:
      description: 'Usuário não encontrado.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    EmailNotFound:
      description: 'Email não encontrado.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    CpfAlreadyExists:
      description: 'CPF já cadastrado.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    EmailAlreadyExists:
      description: 'CPF já cadastrado.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    RegisterUserRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Nome do usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        password:
          type: string
          description: 'A senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          minLength: 8
          example: 'P4$$w0rD'
        confirmPassword:
          type: string
          description: 'O valor do campo `confirmPassword` deve receber o mesmo ao valor do campo `password`.'
          example: 'P4$$w0rD'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        phoneNumber:
          type: string
          example: '5511998765432 ou +5511998765432'
          description: 'O número de telefone no formato E.164'
          minLength: 13
          maxLength: 14
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        password:
          type: string
          description: 'A senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          minLength: 8
          example: 'P4$$w0rD'
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9...'
          description: 'Token JWT para autenticação'
        expiresIn:
          type: integer
          format: int32
          example: 86400000
          description: 'Tempo em milissegundos até o token expirar'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'ID do usuário'
          example: 1
        name:
          type: string
          description: 'Nome do Usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        password:
          type: string
          description: 'A senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          minLength: 8
          example: 'P4$$w0rD'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        phoneNumber:
          type: string
          example: '5511998765432 ou +5511998765432'
          description: 'O número de telefone no formato E.164'
          minLength: 13
          maxLength: 14
        active:
          type: boolean
          description: 'Buscar usuário por status (ativo ou inativo)'
        createdAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'
          description: 'ISO 8601'
        updatedAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'
          description: 'ISO 8601'
        enabled:
          type: boolean
          example: true
        accountNonExpired:
          type: boolean
          example: true
        credentialsNonExpired:
          type: boolean
          example: true
        accountNonLocked:
          type: boolean
          example: true
        username:
          type: string
          example: 'user@example.com'
        authorities:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
        type:
          type: string
