openapi: 3.0.3
info:
  title: 'API de Cadastro de Funcionário e Veterinário'
  description: 'Cadastro de Funcionário e Veterinário'
  version: 1.0.0
servers:
  - url: 'http://localhost:8888/api/v1/admins'
tags:
  - name: admin
    description: 'Cadastrar um novo funcionário ou veterinário'
paths:
  /admins/register:
    post:
      summary: Cria um novo administrador
      description: Endpoint para um administrador criar um novo administrador.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Requisição inválida
        '401':
          description: Não autorizado
      security:
        - bearerAuth: [ ]
        - roles:
            - ADMIN
  /admins/register-employee-or-veterinarian:
    post:
      summary: Cria um novo funcionário ou veterinário
      description: Endpoint para um administrador criar um novo funcionário (employee) ou um novo médico veterinário (veterinarian).
      tags:
        - Admin
      parameters:
        - in: query
          name: roleEnum
          required: true
          schema:
            type: string
            enum: [ EMPLOYEE, VETERINARIAN ]
          description: Role do usuário a ser criado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Requisição inválida
        '401':
          description: Não autorizado
      security:
        - bearerAuth: [ ]
        - roles:
            - ADMIN
components:
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
        - cpf
      properties:
        name:
          type: string
          description: 'Nome completo do Usuário'
        email:
          type: string
          uniqueItems: true
          example: 'user@example.com'
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          description: 'Email do usuário, irá ser utilizado como username para geração do Token JWT.'
        cpf:
          type: string
          uniqueItems: true
          minLength: 11
          maxLength: 11
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'Número de CPF válido do Usuário'
        phoneNumber:
          type: string
          minLength: 13
          maxLength: 14
          example: '+5511998765432'
          description: 'O número de telefone no formato E.164'
        dataAdmissao:
          type: string
          format: date
          pattern: 'dd/MM/yyyy'
        role:
          $ref: '#/components/schemas/Role'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        email:
          type: string
          example: 'user@example.com'
        cpf:
          type: string
          example: 'XXX.XXX.XXX-XX'
        phoneNumber:
          type: string
          example: '+5511998765432'
        active:
          type: boolean
          example: true
          description: 'O usuário ao se cadastrar estará como ativo.'
        role:
          $ref: '#/components/schemas/Role'
        dataAdmissao:
          type: string
          format: date
          pattern: 'dd/MM/yyyy'
        createAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        updatedAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        enabled:
          type: boolean
          example: true
        accountNonExpired:
          type: boolean
          example: true
        credentialsNonExpired:
          type: boolean
          example: true
        accountNonLocked:
          type: boolean
          example: true
        username:
          type: string
          example: 'user@example.com'
        authorities:
          type: array
          items:
            type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/RoleEnum'
        description:
          type: string
        createAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        updatedAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
    RoleEnum:
      type: string
      enum:
        - USER
        - ADMIN
        - EMPLOYEE
        - VETERINARIAN
      example: 'EMPLOYEE'
      description: 'O Admin deve selecionar entre EMPLOYEE e VETERINARIAN'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [ ]
  - roles:
      - ADMIN