openapi: 3.0.3
info:
  title: 'Petconnect'
  description: Password
  termsOfService: 'https://swagger.io/terms/'
  contact:
    name: 'Suporte'
    email: petshop.petconnect@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: 'Repositório do Projeto no GitHub'
  url: 'https://github.com/projeto-final-petshop'
servers:
  - url: 'http://localhost:8888/api/v1'
tags:
  - name: User
    description: 'Senha do Usuário'
paths:
  /users/update-password:
    put:
      summary: 'Cadastrar um novo usuário'
      tags:
        - User
      operationId: 'updatePassword'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: 'Senha atualizada com sucesso!'
        '400':
          description: 'Erro ao atualizar senha'
        '500':
          description: 'Erro interno desconhecido. Tente novamente mais tarde.'
  /auth/reset-password:
    put:
      summary: 'Solicitar o reset de senha.'
      tags:
        - User
      operationId: 'resetPassword'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: 'Senha atualizada com sucesso!'
        '400':
          description: 'Campo inválido.'
        '401':
          description: 'Erro na autenticação.'
        '500':
          description: 'Erro interno desconhecido. Tente novamente mais tarde.'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    roles:
      type: apiKey
      in: header
      name: roles
  parameters:
    AuthHeader:
      in: header
      name: Authorization
      required: true
      schema:
        type: string
        description: 'Token JWT de Autorização'
    Id:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    PetId:
      name: petId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    AppointmentId:
      name: appointmentId
      in: path
      required: true
      schema:
        type: integer
        format: int64
  responses:
    InvalidField:
      description: 'Campo inválido'
    Unauthorized:
      description: 'Unauthorized (Não autenticado)'
    Forbidden:
      description: 'Forbidden (Não tem permissão)'
    UserNotFound:
      description: 'Usuário não encontrado.'
    PetNotFound:
      description: 'Pet não encontrado.'
    AppointmentNotFound:
      description: 'Agendamento não encontrado.'
    Conflict:
      description: 'CPF ou Email já cadastrado.'
    InternalServerError:
      description: 'Internal Server Error'
  schemas:
    UpdatePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          description: 'Senha atual'
        newPassword:
          type: string
          minLength: 8
          description: 'A nova senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
        confirmPassword:
          type: string
          description: 'Confirmar a nova senha'
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          description: 'Email cadastradado para receber o token e o link para alteração de senha.'
    RegisterUserRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Nome do usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        password:
          type: string
          description: 'A senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          minLength: 8
          example: 'P4$$w0rD'
        confirmPassword:
          type: string
          description: 'O valor do campo `confirmPassword` deve receber o mesmo ao valor do campo `password`.'
          example: 'P4$$w0rD'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        phoneNumber:
          type: string
          example: '+5511998765432'
          description: 'O número de telefone no formato E.164'
          minLength: 13
          maxLength: 14
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: 'user@example.com'
          description: 'Email do usuário cadastrado.'
        password:
          type: string
          example: 'P4$$w0rD'
          description: 'Senha já cadastrada.'
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9...'
          description: 'Token JWT para autenticação'
        expiresIn:
          type: integer
          format: int32
          example: 86400000
          description: 'Tempo em milissegundos até o token expirar'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'ID do usuário'
          example: 1
        name:
          type: string
          description: 'Nome do Usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        password:
          type: string
          description: 'A senha deve conter no mínimo 8 caracteres, incluindo uma letra maiúscula, uma letra minúscula, um número e um caractere especial.'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          minLength: 8
          example: 'P4$$w0rD'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        phoneNumber:
          type: string
          example: '5511998765432 ou +5511998765432'
          description: 'O número de telefone no formato E.164'
          minLength: 13
          maxLength: 14
        active:
          type: boolean
          description: 'Buscar usuário por status (ativo ou inativo)'
        createdAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'
          description: 'ISO 8601'
        updatedAt:
          type: string
          format: date-time
          example: '2024-05-25T14:00:26.067893-03:00'
          description: 'ISO 8601'
        enabled:
          type: boolean
          example: true
        accountNonExpired:
          type: boolean
          example: true
        credentialsNonExpired:
          type: boolean
          example: true
        accountNonLocked:
          type: boolean
          example: true
        username:
          type: string
          example: 'user@example.com'
        authorities:
          type: array
          items:
            type: string
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Nome do usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        phoneNumber:
          type: string
          example: '5511998765432 ou +5511998765432'
          description: 'O número de telefone no formato E.164'
          minLength: 13
          maxLength: 14
    FindUserRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Nome do usuário'
          example: 'Nome do Usuário'
        email:
          type: string
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          example: 'user@example.com'
          description: 'Email do usuário deve ter um formato válido e é campo obrigatório'
        cpf:
          type: string
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'CPF do usuário deve ser válido e ter um formato válido'
          minLength: 11
          maxLength: 11
        active:
          type: boolean
          description: 'Buscar usuário por status (ativo ou inativo)'
    PetRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'Rian'
        age:
          type: integer
          format: int32
          example: 5
        color:
          type: string
          example: 'Preto'
        breed:
          type: string
          example: 'Siamês'
        animalType:
          type: string
          example: 'Gato'
        birthdate:
          type: string
          format: date
          example: 27/11/2018
    PetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Rian'
        age:
          type: integer
          format: int32
          example: 5
        color:
          type: string
          example: 'Preto'
        breed:
          type: string
          example: 'Siamês'
        animalType:
          type: string
          example: 'Gato'
        birthdate:
          type: string
          format: date
          example: 27/11/2018
        createdAt:
          type: string
          format: date-time
          example: '2024-05-26 21:49:17'
        updatedAt:
          type: string
          format: date-time
          example: '2024-05-26 21:49:17'
    AppointmentRequest:
      type: object
      required:
        - petId
        - appointmentDate
        - appointmentTime
      properties:
        petId:
          type: integer
          format: int64
          example: 1
        serviceType:
          type: string
        petType:
          type: string
        appointmentDate:
          type: string
          format: date
          example: '10/06/2024'
        appointmentTime:
          type: string
          format: time
          example: '14:00'
    AppointmentResponse:
      type: object
      properties:
        petId:
          type: integer
          format: int64
          example: 1
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        petType:
          $ref: '#/components/schemas/PetType'
        appointmentDate:
          type: string
          format: date
          example: "10/06/2024"
        appointmentTime:
          type: string
          format: time
          example: "14:00"
        status:
          $ref: '#/components/schemas/AppointmentStatus'
    ServiceType:
      type: string
      enum:
        - BATH
        - GROOMING
        - BATH_AND_GROOMING
        - VETERINARY_CONSULTATION
      example: 'BATH'
    PetType:
      type: string
      enum:
        - DOG
        - CAT
        - OTHER
      example: 'DOG'
    AppointmentStatus:
      type: string
      enum:
        - SCHEDULED
        - CANCELED
        - CONCLUDED
        - PENDING
        - CONFIRMED
      example: 'AGENDADO'
security:
  - Bearer: [ ]