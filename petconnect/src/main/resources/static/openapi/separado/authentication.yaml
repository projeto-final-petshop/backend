openapi: 3.0.3
info:
  title: 'API de Cadastro e Autenticação'
  description: 'API de Cadastro e Autenticação'
  version: 1.0.0
servers:
  - url: 'http://localhost:8888/api/v1/auth'
tags:
  - name: register
    description: 'Cadastro do Usuário'
  - name: auth
    description: 'Autenticação do Usuário'
paths:
  /signup:
    post:
      tags:
        - register
      summary: 'Cadastrar um novo usuário'
      operationId: register
      requestBody:
        description: Cadastrar um novo usuário (Dono do Pet)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: 'Usuário Cadastrado com sucesso!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 'Bad Request - Erro ao registrar usuário.'
        '409':
          description: 'Conflict - CPF ou Email já cadastrado.'
        '500':
          description: 'Internal Server Error - Erro desconhecido ao cadastrar usuário.'
  /login:
    post:
      tags:
        - auth
      summary: 'Autenticação do Usuário'
      operationId: authenticate
      requestBody:
        description: 'Autenticação do usuário'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: 'Autenticação bem-sucedida!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 'Unauthorized - Não foi possível autenticar o usuário'
        '500':
          description: 'Internal Server Error - Erro desconhecido ao cadastrar usuário.'
components:
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
        - cpf
      properties:
        name:
          type: string
          description: 'Nome completo do Usuário'
        email:
          type: string
          uniqueItems: true
          example: 'user@example.com'
          pattern: '^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$'
          description: 'Email do usuário, irá ser utilizado como username para geração do Token JWT.'
        password:
          type: string
          minLength: 8
          example: 'P4$$w0rD'
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          description: 'A senha deve conter no mínimo: 8 caracteres, pelo menos uma letra maiúscula, uma letra minúscula, um número e um caracter especial.'
        confirmPassword:
          type: string
          example: 'P4$$w0rD'
          description: 'A senha deve ser a mesma do campo password.'
        cpf:
          type: string
          uniqueItems: true
          minLength: 11
          maxLength: 11
          pattern: '^\d{3}\.\d{3}\.\d{3}-\d{2}$'
          example: 'XXX.XXX.XXX-XX'
          description: 'Número de CPF válido do Usuário'
        phoneNumber:
          type: string
          minLength: 13
          maxLength: 14
          example: '+5511998765432'
          description: 'O número de telefone no formato E.164'
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        email:
          type: string
          example: 'user@example.com'
        cpf:
          type: string
          example: 'XXX.XXX.XXX-XX'
        phoneNumber:
          type: string
          example: '+5511998765432'
        active:
          type: boolean
          example: true
          description: 'O usuário ao se cadastrar estará como ativo.'
        pets:
          type: array
        role:
          $ref: '#/components/schemas/Role'
        createAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        updatedAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        enabled:
          type: boolean
          example: true
        accountNonExpired:
          type: boolean
          example: true
        credentialsNonExpired:
          type: boolean
          example: true
        accountNonLocked:
          type: boolean
          example: true
        username:
          type: string
          example: 'user@example.com'
        authorities:
          type: array
          items:
            type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/RoleEnum'
        description:
          type: string
        createAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
        updatedAt:
          type: string
          format: date-time
          pattern: "yyyy-MM-dd HH:mm:ss"
          example: '2024-05-25 14:00:26'
    RoleEnum:
      type: string
      enum:
        - USER
        - ADMIN
        - EMPLOYEE
        - VETERINARIO
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: 'Email do usuário'
        password:
          type: string
          description: 'Senha do usuário'
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9...'
          description: 'Token JWT para autenticação'
        expiresIn:
          type: integer
          format: int32
          example: 86400000
          description: 'Tempo em milissegundos até o token expirar'
