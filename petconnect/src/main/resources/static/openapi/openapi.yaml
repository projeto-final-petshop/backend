openapi: 3.0.1
info:
  title: PetConnect
  description: Aplicação PetConnect
  version: 1.1.0
servers:
  - url: http://localhost:8888/api/v1
tags:
  - name: Pets
    description: Operações relacionadas a animais de estimação
  - name: Usuários
    description: Operações relacionadas aos usuários
  - name: Auth
    description: Responsável por lidar com operações de autenticação, como registro de usuários.
  - name: Appointment
    description: Agendamento de Serviços e Consultas Veterinárias
  - name: Password
    description: Operações relacionadas ao gerenciamento de senhas de usuários.
  - name: Admin
    description: Cadastro de Administrador, Funcionários e Médicos Veterinários
paths:
  /users/update:
    put:
      tags:
        - Usuários
      summary: Atualizar usuário
      description: Atualiza as informações do usuário atualmente autenticado
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Usuário atualizado com sucesso
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/update-password:
    put:
      tags:
        - Password
      summary: Atualizar senha do usuário
      description: Atualiza a senha do usuário.
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
        required: true
      responses:
        '200':
          description: Senha atualizada com sucesso
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                type: string
  /pets/{petId}:
    get:
      tags:
        - Pets
      summary: Obter Detalhes do Pet
      description: Obtém os detalhes de um animal de estimação pelo ID
      operationId: getPetDetails
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalhes do pet recuperados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '404':
          description: Pet não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
    put:
      tags:
        - Pets
      summary: Atualizar Pet
      description: Atualiza os detalhes de um animal de estimação pelo ID
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        '200':
          description: Pet atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Solicitação inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '404':
          description: Pet não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - Pets
      summary: Excluir Pet
      description: Exclui um animal de estimação pelo ID
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Pet excluído com sucesso
        '401':
          description: Não autorizado
        '403':
          description: Acesso proibido
        '404':
          description: Pet não encontrado
      security:
        - bearerAuth: [ ]
  /appointments/update/{appointmentId}:
    put:
      tags:
        - Appointment
      summary: Atualizar um agendamento existente
      description: Endpoint para atualizar um agendamento veterinário existente
      operationId: updateAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
        required: true
      responses:
        '200':
          description: Agendamento atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Agendamento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
      security:
        - bearerAuth: [ ]
  /pets/create:
    post:
      tags:
        - Pets
      summary: Criar Pet
      description: Cria um novo registro de animal de estimação
      operationId: createPet
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        '201':
          description: Pet criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Solicitação inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
  /auth/signup:
    post:
      tags:
        - Auth
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/reset-password:
    post:
      tags:
        - Password
      summary: Redefinir senha do usuário
      description: Envia um e-mail com link para redefinição da senha do usuário.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        '200':
          description: E-mail de redefinição de senha enviado com sucesso
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                type: string
  /auth/reset-password/confirm:
    post:
      tags:
        - Password
      summary: Confirmar redefinição de senha
      description: Confirma a redefinição de senha com base no token fornecido.
      operationId: confirmResetPassword
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: Reset de senha realizado com sucesso
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                type: string
  /auth/login:
    post:
      tags:
        - Auth
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /appointments/schedule:
    post:
      tags:
        - Appointment
      summary: Agendar um novo serviço ou consulta
      description: Endpoint para agendar um novo serviço ou consulta veterinária
      operationId: scheduleAppointment
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
        required: true
      responses:
        '201':
          description: Agendamento criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Pet não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
      security:
        - bearerAuth: [ ]
  /admins/register:
    post:
      tags:
        - Admin
      summary: Cria um novo administrador
      description: Endpoint para criar um novo administrador
      operationId: createAdministrator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Administrador criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
  /admins/register/{roleCode}:
    post:
      tags:
        - Admin
      summary: Cria um novo usuário com um código de papel específico
      description: Endpoint para criar um novo usuário com base no código do papel fornecido
      operationId: createUser
      parameters:
        - name: roleCode
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
  /users:
    get:
      tags:
        - Usuários
      summary: Obter todos os usuários
      description: Retorna uma lista de todos os usuários cadastrados
      operationId: getAllUsers
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/{userId}:
    get:
      tags:
        - Usuários
      summary: Buscar usuário por ID
      description: Retorna as informações do usuário associado ao ID fornecido
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuário encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
  /users/{email}:
    get:
      tags:
        - Usuários
      summary: Buscar usuário por e-mail
      description: Retorna as informações do usuário associado ao e-mail fornecido
      operationId: findUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - bearerAuth: [ ]
  /users/{cpf}:
    get:
      tags:
        - Usuários
      summary: Buscar usuário por CPF
      description: Retorna as informações do usuário associado ao CPF fornecido
      operationId: getUserByCpf
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuários inativos retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/search:
    get:
      tags:
        - Usuários
      summary: Buscar usuários
      description: Retorna uma lista de usuários com base nos parâmetros fornecidos
      operationId: findUser
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FindUserRequest'
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/search/page:
    get:
      tags:
        - Usuários
      summary: Buscar usuários
      description: Retorna uma lista de usuários com base nos parâmetros fornecidos
      operationId: searchUsers
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: cpf
          in: query
          required: false
          schema:
            type: string
        - name: active
          in: query
          required: false
          schema:
            type: boolean
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Usuário encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado
      security:
        - bearerAuth: [ ]
  /users/me:
    get:
      tags:
        - Usuários
      summary: Obter usuário autenticado
      description: Retorna o usuário autenticado atualmente
      operationId: authenticatedUser
      responses:
        '200':
          description: Usuário autenticado retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/list:
    get:
      tags:
        - Usuários
      summary: Listar usuários pelo nome
      description: Retorna uma lista de usuários cujo nome corresponde ao fornecido
      operationId: listUsersByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
  /users/inactive:
    get:
      tags:
        - Usuários
      summary: Obter usuários inativos
      description: Retorna uma lista de usuários inativos
      operationId: getInactiveUsers
      responses:
        '200':
          description: Lista de usuários inativos retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /users/active:
    get:
      tags:
        - Usuários
      summary: Obter usuários ativos
      description: Retorna uma lista de usuários ativos
      operationId: getActiveUsers
      responses:
        '200':
          description: Lista de usuários ativos retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '500':
          description: Erro interno no servidor
      security:
        - bearerAuth: [ ]
  /pets:
    get:
      tags:
        - Pets
      summary: Listar Pets
      description: Lista todos os animais de estimação do usuário
      operationId: listPets
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de pets recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
  /pets/list-all:
    get:
      tags:
        - Pets
      summary: Listar Todos os Pets
      description: Lista todos os animais de estimação cadastrados no sistema
      operationId: getAllPets
      responses:
        '200':
          description: Lista de pets recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
  /pets/admin/{petId}:
    get:
      tags:
        - Pets
      summary: Obter Pet pelo ID (Admin)
      description: Obtém um animal de estimação pelo ID, apenas para administradores
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detalhes do pet recuperados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '403':
          description: Acesso proibido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '404':
          description: Pet não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: [ ]
  /appointments/{appointmentId}:
    get:
      tags:
        - Appointment
      summary: Obter detalhes de um agendamento
      description: Endpoint para obter detalhes de um agendamento específico
      operationId: getAppointmentById
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detalhes do agendamento obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Agendamento não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
      security:
        - bearerAuth: [ ]
  /appointments/pets/{petId}:
    get:
      tags:
        - Appointment
      summary: Listar agendamentos por pet
      description: Endpoint para listar agendamentos de um pet específico
      operationId: getAppointmentsByPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de agendamentos obtida com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Pet não encontrado
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentResponse'
      security:
        - bearerAuth: [ ]
  /appointments/all:
    get:
      tags:
        - Appointment
      summary: Listar todos os agendamentos do usuário
      description: Endpoint para listar todos os agendamentos do usuário autenticado
      operationId: getAllAppointments
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de agendamentos obtida com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentResponse'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentResponse'
      security:
        - bearerAuth: [ ]
  /users/delete:
    delete:
      tags:
        - Usuários
      summary: Excluir usuário
      description: Exclui o usuário autenticado atualmente
      operationId: deleteUser
      responses:
        '200':
          description: Usuário excluído com sucesso
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: string
      security:
        - bearerAuth: [ ]
  /appointments/cancel/{appointmentId}:
    delete:
      tags:
        - Appointment
      summary: Cancelar um agendamento
      description: Endpoint para cancelar um agendamento veterinário
      operationId: cancelAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agendamento cancelado com sucesso
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Agendamento não encontrado
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: string
      security:
        - bearerAuth: [ ]
components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 3
          type: string
        email:
          type: string
        password:
          pattern: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$
          type: string
          writeOnly: true
        confirmPassword:
          type: string
        cpf:
          pattern: \d{3}\.\d{3}\.\d{3}-\d{2}
          type: string
        phoneNumber:
          pattern: ^\+?\d{13,14}$
          type: string
        active:
          type: boolean
        address:
          type: string
    UpdatePasswordRequest:
      required:
        - confirmPassword
        - currentPassword
        - newPassword
      type: object
      properties:
        currentPassword:
          type: string
          description: Confirmar senha
          example: s3nh@A7uaL
        newPassword:
          pattern: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$
          type: string
          description: Nova senha
          writeOnly: true
          example: P4$$w0rD
        confirmPassword:
          type: string
          description: Confirmar senha
          writeOnly: true
          example: P4$$w0rD
    PetRequest:
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 3
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
    PetResponse:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        petId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    AppointmentRequest:
      type: object
      properties:
        petId:
          type: integer
          format: int64
        serviceType:
          type: string
          enum:
            - BATH
            - GROOMING
            - BATH_AND_GROOMING
            - VETERINARY_CONSULTATION
        petType:
          type: string
          enum:
            - DOG
            - CAT
            - OTHER
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          $ref: '#/components/schemas/LocalTime'
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    AppointmentResponse:
      type: object
      properties:
        petId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        serviceType:
          type: string
          enum:
            - BATH
            - GROOMING
            - BATH_AND_GROOMING
            - VETERINARY_CONSULTATION
        petType:
          type: string
          enum:
            - DOG
            - CAT
            - OTHER
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          $ref: '#/components/schemas/LocalTime'
        status:
          type: string
          enum:
            - SCHEDULED
            - CANCELLED
            - COMPLETED
            - PEDING
            - CONFIRMED
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        appointmentId:
          type: integer
          format: int64
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Pet:
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 3
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        petId:
          type: integer
          format: int64
    Role:
      type: object
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
            - GROOMING
            - VETERINARIAN
            - EMPLOYEE
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        roleId:
          type: integer
          format: int64
    User:
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 3
          type: string
        email:
          type: string
        password:
          pattern: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$
          type: string
        cpf:
          pattern: \d{3}\.\d{3}\.\d{3}-\d{2}
          type: string
        phoneNumber:
          pattern: ^\+?\d{9,14}$
          type: string
        address:
          type: string
        active:
          type: boolean
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        enabled:
          type: boolean
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonLocked:
          type: boolean
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        userId:
          type: integer
          format: int64
      description: Representa o usuário do sistema
    PasswordResetRequest:
      required:
        - email
      type: object
      properties:
        email:
          pattern: ^[\w\.-]+@[a-zA-Z\d\.-]+\.[a-zA-Z]{2,6}$
          type: string
          description: Email do Usuário
          example: username@domain.com
    ResetPasswordRequest:
      required:
        - confirmPassword
        - newPassword
      type: object
      properties:
        newPassword:
          pattern: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$
          type: string
          description: Nova senha
          example: P4$$w0rD
        confirmPassword:
          type: string
          description: Confirmar senha
          example: P4$$w0rD
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int64
    RoleResponse:
      type: object
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
            - GROOMING
            - VETERINARIAN
            - EMPLOYEE
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        roleId:
          type: integer
          format: int64
    UserResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        phoneNumber:
          type: string
        active:
          type: boolean
        role:
          $ref: '#/components/schemas/RoleResponse'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FindUserRequest:
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 3
          type: string
        email:
          type: string
        cpf:
          pattern: \d{3}\.\d{3}\.\d{3}-\d{2}
          type: string
        active:
          type: boolean
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
