openapi: 3.0.1
info:
  title: PetConnect
  description: Aplicação PetConnect
  version: 1.1.0
servers:
  - url: http://localhost:8888/api/v1
tags:
  - name: Auth
    description: Cadastro e Autenticação de Usuário
  - name: Password
    description: Atualização e Reset de Senha
  - name: User
    description: Usuários
  - name: Pets
    description: Animal de Estimação
  - name: Appointment
    description: Agendamento de Serviços e Consultas Veterinárias
  - name: Admin
    description: Cadastro de Administrador, Funcionários e Médicos Veterinários
paths:
  /users/update:
    put:
      tags:
        - User
      operationId: updateUser
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      security:
        - bearerAuth: []
  /users/update-password:
    put:
      tags:
        - Password
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /pets/{id}:
    get:
      tags:
        - Pets
      operationId: getPetDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Pets
      operationId: updatePet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Pets
      operationId: deletePet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - bearerAuth: []
  /appointments/update/{appointmentId}:
    put:
      tags:
        - Appointment
      summary: Atualização (reagendamento) do serviço ou consulta.
      operationId: updateAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
        required: true
      responses:
        '200':
          description: Agendamento atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Requisição inválida
        '404':
          description: Agendamento não encontrado ou não pertence ao usuário.
        '500':
          description: Erro interno ao atualizar agendamento
      security:
        - bearerAuth: []
  /pets/create:
    post:
      tags:
        - Pets
      operationId: createPet
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: []
  /auth/signup:
    post:
      tags:
        - Auth
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /auth/reset-password:
    post:
      tags:
        - Password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/reset-password/confirm:
    post:
      tags:
        - Password
      operationId: confirmResetPassword
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/login:
    post:
      tags:
        - Auth
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /appointments/schedule:
    post:
      tags:
        - Appointment
      summary: Agendar um novo serviço ou uma nova consulta
      operationId: scheduleAppointment
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
        required: true
      responses:
        '200':
          description: Agendamento realizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Requisição inválida
        '404':
          description: Pet não encontrado.
        '500':
          description: Erro interno ao criar agendamento
      security:
        - bearerAuth: []
  /admins/register:
    post:
      tags:
        - Admin
      summary: Cadastrar um novo Administrador
      operationId: createAdministrator
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
            enum: [ ADMIN ]
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        '200':
          description: Novo administrador cadastrado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requisição inválida
      security:
        - bearerAuth: [ ]
  /users:
    get:
      tags:
        - User
      operationId: allUsers
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ADMIN ]
  /users/{id}:
    get:
      tags:
        - User
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ADMIN ]
  /users/search:
    get:
      tags:
        - User
      operationId: findUser
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FindUserRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /users/me:
    get:
      tags:
        - User
      operationId: authenticatedUser
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - bearerAuth: []
  /users/list:
    get:
      tags:
        - User
      operationId: listUsersByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /users/inactive:
    get:
      tags:
        - User
      operationId: listInactiveUsers
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /users/active:
    get:
      tags:
        - User
      operationId: listActiveUsers
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /pets:
    get:
      tags:
        - Pets
      operationId: listPets
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetResponse'
      security:
        - bearerAuth: []
  /appointments/{appointmentId}:
    get:
      tags:
        - Appointment
      summary: Buscar (visualizar) agendamento.
      operationId: getAppointmentById
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agendamento encontrado!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Requisição inválida
        '404':
          description: Agendamento não encontrado.
        '500':
          description: Erro interno ao buscar agendamento
      security:
        - bearerAuth: []
  /appointments/pets/{petId}:
    get:
      tags:
        - Appointment
      summary: Listar agendamentos de um único Pet.
      operationId: getAppointmentsByPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de agendamentos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Pet não encontrado.
        '500':
          description: Erro interno ao carregar agendamento
      security:
        - bearerAuth: []
  /appointments/all:
    get:
      tags:
        - Appointment
      summary: Listar todos os serviços e agendamentos.
      operationId: getAllAppointments
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de agendamentos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Você não possui  nenhum agendamento cadastrado.
        '500':
          description: Erro interno ao carregar agendamento
      security:
        - bearerAuth: []
  /users/delete:
    delete:
      tags:
        - User
      operationId: deleteUser
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      security:
        - bearerAuth: []
  /appointments/cancel/{appointmentId}:
    delete:
      tags:
        - Appointment
      summary: Cancelamento do agendamento de serviço ou consulta.
      operationId: cancelAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Agendamento cancelado com sucesso.'
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 'Requisição inválida'
        '404':
          description: 'Agendamento não encontrado ou não pertence ao usuário.'
        '500':
          description: 'Erro interno ao cancelar o agendamento.'
      security:
        - bearerAuth: []
components:
  schemas:
    UserRequest:
      required:
        - confirmPassword
        - cpf
        - email
        - name
        - password
      type: object
      properties:
        email:
          type: string
          description: Email do Usuário
        password:
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          type: string
          description: 'Senha do Usuário'
          writeOnly: true
        confirmPassword:
          type: string
          description: 'Confirmar senha'
          writeOnly: true
        name:
          minLength: 3
          type: string
          description: 'Nome do Usuário'
        cpf:
          maxLength: 11
          minLength: 11
          type: string
          description: 'Número do CPF do Usuário. Deve ser um número válido'
        phoneNumber:
          maxLength: 14
          minLength: 13
          type: string
          description: 'Número de telefone do Usuário'
        active:
          type: boolean
          description: 'Informa se o usuário está ativo ou não no sistema'
        roleId:
          type: integer
          description: 'Número de identificação única da Role'
          format: int64
    UpdatePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
    PetRequest:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
    PetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
    AppointmentRequest:
      type: object
      properties:
        petId:
          type: integer
          format: int64
        serviceType:
          type: string
          enum:
            - BATH
            - GROOMING
            - BATH_AND_GROOMING
            - VETERINARY_CONSULTATION
        petType:
          type: string
          enum:
            - DOG
            - CAT
            - OTHER
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          $ref: '#/components/schemas/LocalTime'
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    AppointmentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        serviceType:
          type: string
          enum:
            - BATH
            - GROOMING
            - BATH_AND_GROOMING
            - VETERINARY_CONSULTATION
        petType:
          type: string
          enum:
            - DOG
            - CAT
            - OTHER
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          $ref: '#/components/schemas/LocalTime'
        userId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - SCHEDULED
            - CANCELLED
            - COMPLETED
            - PEDING
            - CONFIRMED
    RegisterUserRequest:
      required:
        - confirmPassword
        - cpf
        - email
        - name
        - password
      type: object
      properties:
        email:
          type: string
          description: 'Email do Usuário'
        password:
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          type: string
          description: 'Senha do Usuário'
          writeOnly: true
        confirmPassword:
          type: string
          description: 'Confirmar senha'
          writeOnly: true
        name:
          minLength: 3
          type: string
          description: 'Nome do Usuário'
        cpf:
          maxLength: 11
          minLength: 11
          type: string
          description: 'Número do CPF do Usuário. Deve ser um número válido'
        phoneNumber:
          maxLength: 14
          minLength: 13
          type: string
          description: 'Número de telefone do Usuário'
        active:
          type: boolean
          description: 'Informa se o usuário está ativo ou não no sistema'
    Appointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pet:
          $ref: '#/components/schemas/Pet'
        serviceType:
          type: string
          enum:
            - BATH
            - GROOMING
            - BATH_AND_GROOMING
            - VETERINARY_CONSULTATION
        petType:
          type: string
          enum:
            - DOG
            - CAT
            - OTHER
        appointmentDate:
          type: string
          format: date
        appointmentTime:
          $ref: '#/components/schemas/LocalTime'
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum:
            - SCHEDULED
            - CANCELLED
            - COMPLETED
            - PEDING
            - CONFIRMED
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        color:
          type: string
        breed:
          type: string
        animalType:
          type: string
        birthdate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          enum:
            - USER
            - ADMIN
            - EMPLOYEE
            - VETERINARIAN
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          type: string
          writeOnly: true
        cpf:
          type: string
        phoneNumber:
          type: string
        active:
          type: boolean
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        enabled:
          type: boolean
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
    ResetPasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
        confirmPassword:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int64
    FindUserRequest:
      required:
        - cpf
        - email
        - name
      type: object
      properties:
        email:
          type: string
          description: 'Email do Usuário'
        name:
          minLength: 3
          type: string
          description: 'Nome do Usuário'
        cpf:
          maxLength: 11
          minLength: 11
          type: string
          description: 'Número do CPF do Usuário. Deve ser um número válido'
        active:
          type: boolean
          description: 'Informa se o usuário está ativo ou não no sistema'
    UserResponse:
      required:
        - confirmPassword
        - cpf
        - email
        - name
        - password
      type: object
      properties:
        userId:
          type: integer
          description: 'Número de identificação única do usuário'
          format: int64
        email:
          type: string
          description: 'Email do Usuário'
        password:
          pattern: '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@#$%^&*()-+]).{8,}$'
          type: string
          description: 'Senha do Usuário'
          writeOnly: true
        confirmPassword:
          type: string
          description: 'Confirmar senha'
          writeOnly: true
        name:
          minLength: 3
          type: string
          description: 'Nome do Usuário'
        cpf:
          maxLength: 11
          minLength: 11
          type: string
          description: 'Número do CPF do Usuário. Deve ser um número válido'
        phoneNumber:
          maxLength: 14
          minLength: 13
          type: string
          description: 'Número de telefone do Usuário'
        active:
          type: boolean
          description: 'Informa se o usuário está ativo ou não no sistema'
        role:
          type: string
          description: 'Tipo de permissão que o Usuário possui.'
        createdAt:
          pattern: 'yyyy-MM-dd HH:mm:ss'
          type: string
          description: 'Data da Criação do Cadastro'
          format: date-time
        updatedAt:
          pattern: 'yyyy-MM-dd HH:mm:ss'
          type: string
          description: 'Data de Atualização do Cadastro'
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: 'bearer'
      bearerFormat: JWT
