openapi: 3.0.3
info:
  title: 'API Petconnect'
  description: |-
    
    ## Validações dos Campos
        
    ### `username` (email do usuário)
    * Deve ser único no sistema.
    * Deve seguir um formato de email válido 
    * Não deve conter caracteres especiais ou espaços em branco.
    ### `password` (senha)
    * **Comprimento mínimo de 8 caracteres**: 
      Essa medida ajuda a aumentar a complexidade da senha, tornando-a mais difícil de ser adivinhada por meio de ataques de força bruta.
    * **Inclusão de pelo menos uma letra maiúscula**: 
      A presença de letras maiúsculas diversifica o conjunto de caracteres possíveis, dificultando a tentativa de adivinhação da senha.
    * **Inclusão de pelo menos uma letra minúscula**: 
      A combinação de letras maiúsculas e minúsculas torna a senha mais robusta e segura.
    * **Inclusão de pelo menos um número**: 
      A utilização de números aumenta ainda mais a complexidade da senha, tornando-a mais resistente a ataques.
    * **Inclusão de pelo menos um caractere especial**: 
      A presença de caracteres especiais, como `!@#$%^&*()-+`, contribui para a aleatoriedade da senha e dificulta sua predição.
    
    As mensagens de erro e os status estão na planilha .xls anexa.

  version: 1.0.1
servers:
  - url: 'http://localhost:8888/api/v1'
tags:
  - name: auth
    description: "Autenticação"
paths:
  /auth/login:
    post:
      summary: 'Entrar no sistema'
      description: 'Autentica um usuário e retorna um token JWT se for bem-sucedido.'
      tags: [ auth ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Nome de usuário ou endereço de e-mail para login'
                password:
                  type: string
                  description: 'Senha do usuário'
      responses:
        '200':
          description: 'Login bem-sucedido.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: 'Token JWT para autenticação'
        '401':
          $ref: "#/components/responses/401"
  /auth/logout:
    post:
      summary: 'Sair do sistema'
      description: 'nvalida o token JWT do usuário.'
      tags: [ auth ]
      responses:
        '200':
          description: 'Logout bem-sucedido.'
        '401':
          description: 'Acesso não autorizado.' # O usuário pode não estar logado ou o token é inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Acesso não autorizado.'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: 'Código de erro HTTP'
          example: 500
        status:
          type: string
          description: 'Descrição do status HTTP'
          example: 'Internal Server Error'
        message:
          type: string
          description: 'Mensagem de erro detalhada'
          example: 'Ocorreu um erro inesperado no servidor. Tente novamente mais tarde.'
  responses:
    '400':
      description: 'Bad Request'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    '401':
      description: 'Unauthorized'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    '403':
      description: 'Forbidden'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    '404':
      description: 'Not Found'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    '409':
      description: 'Conflict'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    '500':
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"