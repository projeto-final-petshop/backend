openapi: 3.0.3
info:
  title: 'API Address'
  description: |-
    ### API para gerenciamento de endereços ###
    
    **Validação rigorosa de dados:** A API Address implementa validações rígidas para garantir a integridade dos dados inseridos. O formato do CEP, por exemplo, é rigorosamente verificado para garantir a compatibilidade com o padrão brasileiro.
    
    **Integração com API externa de CEP:** A API Address se integra à API externa de CEP para buscar informações adicionais sobre endereços, como logradouro, bairro, cidade e estado. Isso garante que seus dados de endereço estejam sempre atualizados e completos.
    
    **Documentação completa:** A API Address oferece documentação completa e amigável para desenvolvedores, incluindo exemplos de código e descrições detalhadas de cada endpoint.
    
    **Casos de uso:**

    * **Cadastro de novos endereços:** Utilize a API para cadastrar novos endereços em seu sistema, garantindo a qualidade e confiabilidade dos dados.
    * **Consulta de endereços:** Acesse informações completas sobre endereços a partir do CEP, incluindo logradouro, bairro, cidade e estado.
    * **Atualização de endereços:** Mantenha seus dados de endereço atualizados, modificando informações como logradouro, bairro ou número.
    * **Exclusão de endereços:** Remova endereços desatualizados ou não utilizados de seu sistema de forma segura e eficiente.

  version: 1.0.0
servers:
  - url: 'http://localhost:8888/api/v1/address'
tags:
  - name: address
    description: "Operações relacionadas a endereços."
paths:
  /{cep}/json:
    get:
      summary: 'Recupera um endereço a partir do CEP informado.'
      description: 'Consulta um endereço específico por CEP.'
      tags: [ address ]
      parameters:
        - in: path
          name: cep
          required: true
          schema:
            type: string
            pattern: '^\\d{8}$'
      responses:
        '200':
          description: 'Endereço encontrado com sucesso!'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressResponse"
        '400':
          description: 'Solicitação inválida (dados incorretos).'
  /register:
    post:
      summary: 'Cadastra um novo endereço'
      description: 'Cria um novo endereço a partir dos dados informados no corpo da requisição.'
      tags: [ address ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '201':
          description: 'Endereço cadastrado com sucesso'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
        '400':
          description: Erro na validação do endereço
  /list:
    get:
      summary: 'Recupera uma lista de todos os endereços.'
      description: 'Obtém todos os endereços cadastrados no sistema.'
      tags: [ address ]
      responses:
        '200':
          description: 'Lista de endereços recuperada com sucesso.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AddressResponse"
  /{id}:
    put:
      summary: 'Atualiza um endereço existente'
      description: 'Atualiza os dados de um endereço cadastrado.'
      tags: [ address ]
      parameters:
        - name: id
          in: path
          required: true
          description: 'Identificador único do endereço'
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
      responses:
        '204':
          description: 'Endereço atualizado com sucesso'
    delete:
      summary: 'Exclui um endereço'
      description: 'Exclui o endereço cadastrado com o identificador informado.'
      tags: [ address ]
      parameters:
        - name: id
          in: path
          required: true
          description: 'Identificador único do endereço'
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 'Endereço excluído com sucesso'
components:
  schemas:
    AddressRequest:
      type: object
      properties:
        cep:
          type: string
          format: cep
          pattern: "^\\d{8}$"  # Regular expression for 8-digit CEP format
          example: '01001000'
          description: 'CEP a ser cadastrado (obrigatório).'
        numero:
          type: string
          example: '123'
          description: 'Número do endereço.'
    AddressResponse:
      type: object
      properties:
        cep:
          type: string
          format: cep
          pattern: "^\\d{8}$"  # Regular expression for 8-digit CEP format
          example: '01001000'
          description: 'Código de Endereçamento Postal (CEP) no formato brasileiro (8 dígitos).'
        logradouro:
          type: string
          example: 'Praça da Sé'
          description: 'Nome do logradouro (rua, avenida, etc.).'
        complemento:
          type: string
          example: 'lado ímpar'
          description: 'Complemento do endereço (opcional).'
        bairro:
          type: string
          example: 'Sé'
          description: 'Bairro onde o endereço se localiza.'
        localidade:
          type: string
          example: 'São Paulo'
          description: 'Cidade onde o endereço se localiza.'
        uf:
          type: string
          example: 'SP'
          description: 'Sigla da Unidade Federativa do endereço.'
        numero:
          type: string
          example: '123'
          description: 'Número do endereço.'
    UpdateAddressRequest:
      type: object
      properties:
        cep:
          type: string
          format: cep  # Custom format for CEP (optional)
          pattern: "^\\d{8}$"
          example: '01001000'
          description: 'CEP do endereço (opcional para atualização).'
        logradouro:
          type: string
          example: 'Praça da Sé'
          description: 'Nome do logradouro (opcional para atualização).'
        complemento:
          type: string
          example: 'lado ímpar'
          description: 'Complemento do endereço (opcional para atualização).'
        bairro:
          type: string
          example: 'Sé'
          description: 'Bairro do endereço (opcional para atualização).'
        localidade:
          type: string
          example: 'São Paulo'
          description: 'Cidade do endereço (opcional para atualização).'
        uf:
          type: string
          example: 'SP'
          description: 'Sigla da UF do endereço (opcional para atualização).'
        numero:
          type: string
          example: '123'
          description: 'Número do endereço (opcional para atualização).'